/* 1.垂直条纹 */
/* 假设我们有一条基本的垂直线性渐变 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(#fb3, #58a);
}
/* 现在，让我们试着把这两个色标拉近一点 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(#fb3 20%, #58a 80%);
}
/* 现在容器顶部的 20% 区域被填充为 #fb3 实色，而底部 20% 区域被填充为 #58a 实色。真正的渐变只出现在容器 60% 的高度区域。如果我们
把两个色标继续拉近（分别改为 40% 和 60%），那真正的渐变区域就变得更窄了。你是不是开始好奇，如果我们把两个色标重合在一起，
会发生什么？ */
.root {
  width: 200px;
  height: 200px;
  /* background: linear-gradient(#fb3 40%, #58a 60%); */
  background: linear-gradient(#fb3 50%, #58a 50%);
}
/* 如果多个色标具有相同的位置，它们会产生一个无限小的过渡区域，过渡的起止色分别是第一个和最后一个指定值。从效果上看，颜色会在那
个位置突然变化，而不是一个平滑的渐变过程。 */
/* 因为渐变是一种由代码生成的图像，我们能像对待其他任何背景图像那样对待它，而且还可以通过 background-size 来调整其尺寸 又由于背
景是默认平铺repeat的，会形成条纹效果*/
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(#fb3 50%, #58a 50%);
  /* background-size: 100% 30px; */
}

/* 我们还可以用相同的方法来创建不等宽的条纹，只需调整色标的位置值即可 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(#fb3 30%, #58a 0);
  /* background-size: 100% 30px; */
}

/* 如果要创建超过两种颜色的条纹，也是很容易的。举例来说，下面的代码可以生成三种颜色的水平条纹 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(#fb3 30%, #58a 0, #58a 66.6%, yellowgreen 0);
  /* background-size: 100% 30px; */
}

/* 可以通过渐变轴改变条纹方向,形成水平条纹 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(90deg ,#fb3 30%, #58a 0, #58a 66.6%, yellowgreen 0);
  /* background-size: 30px 100%; */
}


/* 2.45度条纹 */
/* 在完成了水平和垂直条纹之后，我们可能会顺着往下想：如果我们再次改变 background-size 的值和渐变的方向，是不是就可以得到斜向 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(45deg ,#fb3 30%, #58a 0, #58a 66.6%, yellowgreen 0);
  /* background-size: 30px 30px; */
}

/* 可以发现，这个办法行不通。原因在于我们只是把每个“贴片”内部的渐变旋转了 45°，而不是把整个重复的背景都旋转了。我们以前用位图来生
成斜向条纹时（只有可以无缝拼接的图像才能生成斜向条纹）。单个贴片包含了四条条纹，而不是两条，只有这样才有可能做到无缝拼接。它正是我们
需要在 CSS 代码中重新实现的贴片，因此我们需要增加一些色标： */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(45deg ,#fb3 25%, #58a 0, #58a 50%, #fb3 0, #fb3 75%, #58a 0 );
  /* background-size: 30px 30px; */
}

/* 如你所见，我们成功地创建了斜向条纹，但这些条纹看起来要比我们在前面制作的水平和垂直条纹细一些。为了理解这其中的道理，在我们的斜向条纹
中，background-size指定的长度值决定了直角三角形的斜边长度，但条纹的宽度实际上是直角三角形的高。在图 2.5 中可以看到图形化的解释。
这意味着，如果想让条纹的宽度变化为我们原本想要的 15px，15*√2=½*X ，X为需要指定的background-size像素：42.426 406 871 像素 */
.root {
  width: 200px;
  height: 200px;
  background: linear-gradient(45deg ,#fb3 25%, #58a 0, #58a 50%, #fb3 0, #fb3 75%,  #58a 0 );
  /* background-size: 42.426406871px 42.426406871px; */
}


/* 3.任意角度条纹*/
/* 在前面的段落中展示的方法还不够灵活。假设我们想让条纹不是 45°而是 60°怎么办？或者是 30°？又或者是 3.141 592 653 5°？如果我们只是把渐
变的角度改一下，那么结果看起来会相当糟糕。 */
/* 幸运的是，我们还有更好的方法来创建斜向条纹。一个鲜为人知的真相是 linear-gradient() 和 radial-gradient() 还各有一个循环式的加强
版：repeating-linear-gradient() 和 repeating-radial-gradient()。它们的工作方式跟前两者类似，只有一点不同：色标是无限循环重复的，直
到填满整个背景。下面是一个重复渐变的例子 */
.root {
  width: 300px;
  height: 200px;
  /* background: repeating-linear-gradient(45deg, #fb3, #58a 30px); */
  /* 这样写不行👇 */
  background: repeating-linear-gradient(45deg, #fb3 15px, #58a 0, #58a 30px,#fb3 0);
  /* 应该这样写👇 */
  background: repeating-linear-gradient(45deg, #fb3, #fb3 15px,#58a 0, #58a 30px);
  /* 改变渐变的角度 */
  background: repeating-linear-gradient(60deg, #fb3, #fb3 15px,#58a 0, #58a 30px);
  /* 简写（可能不支持） */
  background: repeating-linear-gradient(45deg, #fb3 0 15px, #58a 0 30px)
}

/* 现在是在渐变的色标中指定长度，而不是原来的 background-size。这里的 background-size 是初始值，对渐变来说就是以整个元素的范围进行
填充。这意味着代码中的长度值更加直观，因为这些长度是直接在渐变轴上进行度量的，直接代表了条纹自身的宽度。我们再也不需要计算 */
/* 我们最好用前面的方法来实现水平或垂直的条纹，而用这种方法来实现斜向条纹 */


/* 4.同色系条纹 */
/* 在大多数情况下，我们想要的条纹图案并不是由差异极大的几种颜色组成的，这些颜色往往属于同一色系，只是在明度方面有着轻微的差异。举个
例子，我们来看看这个条纹图案 */
.root {
  width: 300px;
  height: 200px;
  /* background: repeating-linear-gradient(30deg, #79b, #79b 15px, #58a 0, #58a 30px); */
}

/* 条纹是由一个主色调（ #58a）和它的浅色变体所组成的。但是，这两种颜色之间的关系在代码中并没有体现出来。此外，如果我们想要改变这个条纹的
主色调，甚至需要修改四处！幸运的是，还有一种更好的方法：不再为每种条纹单独指定颜色，而是把最深的颜色指定为背景色，同时把半透明白色的条纹叠加
在背景色之上来得到浅色条纹 */

