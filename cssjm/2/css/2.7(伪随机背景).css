/* 重复平铺的几何图案很美观，但看起来可能有一些呆板。其实自然界中的事物都不是以无限平铺的方式存在的。即使重复，也往往伴随着多样
性和随机性。比如花园里的花朵：它们因为排列整齐而生出美感，也会因为稍稍错落而透出情趣。没有两朵花是完全一样的。这就是为什么当我们
试图让背景图案尽可能显得自然的时候，往往会想办法让人完全忽略或难以察觉平铺贴片之间的“接缝”，而这一点又与我们保持较小文件体积的期
望直接冲突。 */
/* 当你注意到一个有辨识度的特征（比如，木纹上的节疤）在以固定的规律循环重复时，那它试图营造的自然随机性就会立刻崩塌。 */
/* 重现大自然的随机性是一个挑战，因为 CSS 本身没有提供任何随机功能。让我们以条纹作为例子吧。假设我们想得到不同颜色和不同宽度的垂直
条纹（方便起见，我们只讨论四种颜色），并且不能让人看出贴片平铺时的“接缝”。我们的第一个想法可能就是创建一个具有四种颜色的条纹图案： */
.root {
  width: 500px;
  height: 200px;
  background: linear-gradient(90deg, #fb3 15%, #655 0, #655 40%, #ab4 0,  #ab4 65%, hsl(20, 40%, 90%) 0 );
  background-size: 80px 100%;
}

/* 为了更真实地模拟条纹的随机性，我们接下来可能会想到，把这组条纹从一个平面拆散为多个图层：一种颜色作为底色，另三种颜色作为条纹，然
后再让条纹以不同的间隔进行重复平铺。这一点不难做到，我们在色标中定好条纹的宽度，再用 background-size 来控制条纹的间距。代码看起来可
能是这样的： */
.root {
  background: hsl(20, 40%, 90%);
  background-image:
  linear-gradient(90deg, #fb3 10px, transparent 0),
  linear-gradient(90deg, #ab4 20px, transparent 0),
  linear-gradient(90deg, #655 20px, transparent 0);
  background-size: 80px 100%, 60px 100%, 40px 100%;
}

/* 因为最顶层贴片的重复规律最容易被察觉（它没有被任何东西遮挡），我们应该把平铺间距最大的贴片安排在最顶层（在我们的例子中是橙色条
纹）。可以看到，这样的结果显明更有随机的感觉；但如果仔细观察的话，仍然可以看出图案每隔 240px 就会重复一次。这个组合图案中第
一个贴片的终点，就是各层背景图像以不同间距重复数次后再次统一对齐的点。让我们再次穿越回初中数学课堂：如果我们有一些数字，那么可以同时
整除所有数字的最小数字就叫作它们的最小公倍数（LCM）。因此，这里贴片的尺寸实际上就是所有 background-size 的最小公倍数，而 40、60 和 80
的最小公倍数正是 240。 */
/* 根据这个逻辑，要让这种随机性更加真实，我们得把贴片的尺寸最大化。感谢数学，我们不需要苦苦思索如何做到这一点，因为我们已经知道答
案了。为了让最小公倍数最大化，这些数字最好是“相对质数”。在这种情况下，它们的最小公倍数就是它们的乘积。举例来说，3、4 和 5 是相对质
数，因此它们的最小公倍数就是 3×4×5=60。要达成相对质数，最简单的办法就是尽量选择质数，因为质数跟其他任意数字都是相对质数。在网上可以
找到质数的清单，它们有的非常大。 */
/* 好家伙我tm直接好家伙 */
.root {
  background: hsl(20, 40%, 90%);
  background-image:
  linear-gradient(90deg, #fb3 11px, transparent 0),
  linear-gradient(90deg, #ab4 23px, transparent 0),
  linear-gradient(90deg, #655 41px, transparent 0);
  background-size: 41px 100%, 61px 100%, 83px 100%;
}

/* 这个技巧被 Alex Walker 定名为“蝉原则”，他最先提出了通过质数来增加随机真实性的想法。请注意这个方法不仅适用于背景，还可以用于其他
涉及有规律重复的情况。
在照片图库中，为每幅图片应用细微的伪随机旋转效果时，可以使用多个 :nth-child(a) 选择符，且让 a 是质数。
如果要生成一个动画，而且想让它看起来不是按照明显的规律在循环时，我们可以应用多个时长为质数的动画。*/