/* 饼图在网页中的运用极为普遍，比如简单的统计图表、进度指示器、定时器等，不一而足。尽管如此，饼图在过去很长一段时期内完全无法通过
Web 技术创建出来，即便是最简单的两种颜色的形态也不例外。过去要实现饼图，要么动用一个外部的图像处理软件来为饼图中的多个值制作多张图
片，要么动用那些专门为复杂图表而设计的 JavaScript框架。尽管这件事情已经不像过去那样“难于上青天”，但也仍然不存在“一行代码万事大吉”
的捷径。不过总的来说，眼下已经有一些更便捷、更易维护的方法来实现饼图了。 */

/* 基于 transform 的解决方案 */
/* 这个方案在结构层面是最佳选择：它只需要一个元素作为容器，而其他部分是由伪元素、变形属性和 CSS 渐变来实现的。让我们先从一个简单的
元素开始：假设我们目前的需求是一个最简单的饼图，其展示的比率是固定的20%；稍后再来改进它的灵活性。我们首先把这个元素设置为一个圆形，
以它作为背景（参见图 3-50）： */
/* .root {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: greenyellow;
} */

/* 我们的饼图是绿色的（确切地说是 yellowgreen），并将采用棕色（ #655）来显示比率。我们首先可能会想到用斜向拉伸变形来处理比率扇
区，但稍加尝试就会发现，这其实是一条死胡同。于是我们换种思路，把圆形的左右两部分指定为上述两种颜色，然后用伪元素覆盖上去，通过旋转来
决定露出多大的扇区。为了把圆形的右半部分设置为棕色，我们要用到一个简单的线性渐变： */
.root {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background: greenyellow;
  background-image: linear-gradient(90deg, transparent 50%, #655 0);
}

/* 可以看到，其结果正是我们所需要的。接下来，我们可以继续设置伪元素的样式，让它起到遮盖层的作用： */
/* .root::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
} */

/* 可以在看到，我们的伪元素现在相对于整个饼图进行了重叠。不过现在还没有设置任何样式，它还起不到遮盖的作用：暂时只是一个透明
的矩形。在开始为它设置样式之前，我们还要再做一些观察和分析。我们希望它能遮盖圆形中的棕色部分，因此应该给它指定绿色背景。在这
里使用 background-color: inherit 声明可以避免代码的重复，因为我们希望它的背景色与其宿主元素保持一致。
 我们希望它是绕着圆形的圆心来旋转的，对它自己来说，这个点就是它左边缘的中心点。因此，我们应该把它的 transform-origin
设置为 0 50%，或者干脆写成 left。
 我们不希望它呈现出矩形的形状，否则它会突破整个饼图的圆形范围。因此要么给 .root 设置 overflow: hidden 的样式，要么给这个
伪元素指定合适的 border-radius 属性来把它变成一个半圆。综合上面的思路，这个伪元素的 CSS 就确定下来了 */

/* .root::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  transform: rotate(.2turn);
} */

/* 我们的饼图看起来就是图中的样子了。接下来，美好的事情即将发生！我们现在可以通过一个 rotate() 变形属性来让这个伪元素转起来。如
果我们要显示出 20% 的比率，我们可以指定旋转的值为 72deg（0.2 ×360 = 72），写成 .2turn 会更加直观一些。在图 3-54 中，你还可以看到其
他一些旋转值的情况。你可能以为这就大功告成了，但事实上我们才刚刚开了个头。我们的饼图在显示 0 到 50% 的比率时运作良好，但如果我们尝试
显示 60% 的比率时（比如指定旋转值为 .6turn 时）。不过也别泄气，我们一定能够排除万难修复这个问题！如果把 50%~100% 的比率看作另外一个
问题，我们就会发现，可以使用上述技巧的一个反向版本来实现这个范围内的比率：设置一个棕色的伪元素，让它在 0 至 .5turn 的范围内旋转。因此
，要得到一个 60% 比率的饼图，伪元素的代码可能是这样的： */
/* .root::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background: #655;
  transform-origin: left;
  transform: rotate(.1turn);
} */

/* 你可以看到它的实际效果。由于已经找到了实现任意比率的方法，我们甚至可以用 CSS 动画来实现一个饼图从 0 变化到 100% 的动
画，从而得到一个炫酷的进度指示器： */
@keyframes spin {
  to { transform: rotate(.5turn); }
}
@keyframes bg {
 50% { background: #655; }
}
.root::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  animation: spin 3s linear infinite,
  bg 6s step-end ;
}

/* 这个效果很棒，但我们怎样才能制作出多个不同比率的静态饼图呢？（这似乎才是更加常见的需求。）理想情况下，我们希望可以用这样的方式来
书写结构： 
<div class="pie">20%</div>
<div class="pie">60%</div>
然后就能得到两个饼图，一个展示为 20%，另一个展示为 60%。首先，我们需要探索如何用内联样式来实现这个需求；接下来，我们就可以写一小
段脚本来解析文本内容并把内联样式添加到元素上去，以实现代码的优雅性、封装抽象度、可维护性，以及（可能是）最重要的一点——可访问性。
用内联样式来控制饼图的比率带来了一个很大的挑战：这些负责设置比率的 CSS 代码最终是要应用到伪元素身上的。你可能已经知道了，我们无
法为伪元素设置内联样式，因此还要开动脑筋寻找对策。
*/
/* 解决方案恰恰来源于一个看似最不沾边的地方。我们将使用上面刚刚用到的那个动画，但动画必须处于暂停状态。跟常规情形下我们让动画动起
来的做法不一样，这里我们要用负的动画延时来直接跳至动画中的任意时间点，并且定格在那里。很难理解？别担心，先来看看负的 animation-delay
在规范中的解释。 */
/* 一个负的延时值是合法的。与 0s 的延时类似，!!它意味着动画会立即开始播放，但会自动前进到延时值的!绝对值!处!!，就好像动画在过去已经播
放了指定的时间一样。因此实际效果就是动画跳过指定时间而从中间开始播放了。” */
/* 因为我们的动画是暂停的，所以动画的第一帧（由负的 animationdelay 值定义）将是唯一显示出的那一帧。在饼图上显出的比率就是我们的
animation-delay 值在总的动画持续时间中所占的比率。举例来说，如果动画持续时间定为 6s，我们只需要把 animation-delay 设置为 -1.2s，
就能显示出 20% 的比率。为了简化这个计算过程，我们可以设置一个长达 100s的持续时间。别忘了，这里的动画是永远处在暂停状态的，因此我们
指定的持续时间并不会产生其他副作用。现在还剩最后一个问题：动画是作用在伪元素上的，但我们希望最终内联样式可以设置在 .pie 元素上。不
过，由于 <div> 上并没有任何动画效果，我们可以用内联样式的方式为其设置 animation-delay 属性，然后再在伪元素上应用 animation-delay
: inherit; 属性。综合以上要素，如果要让饼图显示为 20% 和 60%，则结构代码为： */
/* .pie {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background: greenyellow;
  background-image: linear-gradient(90deg, transparent 50%, #655 0);
} */
/* @keyframes spin {
  to { transform: rotate(.5turn); }
 }
 @keyframes bg {
  50% { background: #655; }
 }
 .pie::before {
  content: '';
  display: block;
  margin-left: 50%;
  height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  animation: spin 50s linear infinite,
  bg 100s step-end infinite;
  animation-play-state: paused;
  animation-delay: inherit;
} */
/* 此时，我们就可以再次优化结构，把饼图的比率写到元素的内容中，就像我们最开始所期望的那样；然后我们通过一段简单的脚本来把
animation-delay 写到内联样式中
$$('.pie').forEach(function(pie) {
 var p = parseFloat(pie.textContent);
 pie.style.animationDelay = '-' + p + 's';
});
 */

 /* 请注意，我们原封不动地保留了文字，因为我们需要它来确保可访问性和可用性。目前，我们的饼图看起来就是这样的效果。我们可以利
用 color: transparent 来把文字隐藏起来，同时还保证了可访问性，因为此时文字仍然是可以被选中和打印的。我们还可以进一步优化，
把比率文字放置在饼图的中心处，从而方便用户选中它。为了实现这一点，我们需要进行以下步骤。 */
/* 1.把这个饼图的 height 换成 line-height（或者添加一个跟 height相等的 line-height 属性，但这会增加无意义的代码重复；其实
line-height 本身就可以起到设置高度的作用）。
2.通过绝对定位来完成对伪元素的尺寸设置和定位操作，这样它就不会把文字推到下面了。
3.增加 text-align: center; 来实现文字的水平居中。
 */
 .pie {
  position: relative;
  width: 100px;
  line-height: 100px;
  border-radius: 50%;
  background: yellowgreen;
  background-image:
  linear-gradient(to right, transparent 50%, #655 0);
  color: transparent;
  text-align: center;
 }
 @keyframes spin {
  to { transform: rotate(.5turn); }
 }
 @keyframes bg {
  50% { background: #655; }
 }
 .pie::before {
  content: '';
  position: absolute;
  top: 0; left: 50%;
  width: 50%; height: 100%;
  border-radius: 0 100% 100% 0 / 50%;
  background-color: inherit;
  transform-origin: left;
  animation: spin 50s linear infinite,
  bg 100s step-end infinite;
  animation-play-state: paused;
  animation-delay: inherit;
}

/* 基于 角向渐变 的解决方案 */

/* 还记得“棋盘”一节中提到的角向渐变吗？它在这里也是大有用武之地的。我们在生成饼图时只需要一个圆形元素，再配上一幅具有两个色标的角向
渐变即可。举例来说 40% 饼图可能就是这么简单 */
/* .ccpie {
  width: 100px; height: 100px;
  border-radius: 50%;
  background: conic-gradient(#655 40%, yellowgreen 0);
} */
/* 不仅如此，一旦 attr() 函数在 CSS 值（第三版）（http://w3.org/TR/css3-values/#attr-notation）中的扩
展定义得到广泛实现之后，你将可以通过一个简单的 HTML 标签属性来控制饼图的比率显示。(很遗憾，现在也不行) */
.ccpie {
  width: 100px; height: 100px;
  border-radius: 50%;
  /* background: conic-gradient(#655 attr(data-value %), yellowgreen 0);; */
}
