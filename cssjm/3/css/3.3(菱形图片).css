/* 在视觉设计中，把图片裁切为菱形是一种常见的设计手法，但在 CSS中还没有一种简单直观的方法来实现它。事实上，直到最近，这种效果才基
本成为可能。当网页设计师想要实现这种设计风格时，他们通常不希望在图像处理软件中预先把图片裁好。显然不用说你也知道，这个方法的可维护性
并不好。如果未来有人想修改图片风格，将很难增加其他效果，而且最终往往会搞得一团糟。 */

/* 基于变形的方案 */
/* 主要的思路与前一篇攻略“平行四边形”中讨论的第一个解决方案一致：需要把图片用一个 <div> 包裹起来，然后对其应用相反的 rotate()
变形样式： */
/* .root {
  width: 100px;
  height: 100px;
  transform: rotate(45deg);
  overflow: hidden;
  margin: 200px;
} */

/* .root > img {
  max-width: 100%;
  transform: rotate(-45deg);
} */

/* 主要问题在于 max-width: 100% 这条声明。100% 会被解析为容器（.root）的边长。但是，我们想让图片的宽度与容器的对角线相等，而
不是与边长相等。我们又要用到勾股定理了。因此，把 maxwidth 的值设置为xxx是很合理的，或者把这个值向上取整为 142%，因为我们
不希望因为计算的舍入问题导致图片在实际显示时稍小（但稍大是没问题的，反正我们都是在裁切图片嘛）。(好像不行) */
.root > img {
  /* max-width: 142%; */  
  /* transform: rotate(-45deg); */
}

/* 如果用 scale() 变形样式来把这个图片放大，实际上会更加合理，原因如下。 */
/* 我们希望图片的尺寸属性保留 100% 这个值，这样当浏览器不支持变形样式时仍然可以得到一个合理的布局。
通过 scale() 变形样式来缩放图片时，是以它的中心点进行缩放的（除非我们额外指定了 transform-origin 样式）。通过 width 属性
来放大图片时，只会以它的左上角为原点进行缩放，从而迫使我们动用额外的负外边距来把图片的位置调整回来。 */
/* .root > img {
  max-width: 100%;
  transform: rotate(-45deg) scale(1.42);
} */

/* 上面的方法确实可以奏效，但它基本上是一个 hack。这个方法需要一层额外的 HTML 标签，这不够简洁；代码本身也不够直观；它甚至还不够健
壮——如果我们碰巧要处理一张非正方形的图片，这个小把戏就会原形毕露 */
/* 事实上，我们还有一个更好的办法来完成这个任务。它的主要思路是使用 clip-path 属性。这个特性也是从 SVG 那里借鉴而来，已经可以应用
在 HTML 元素上了（至少对于支持的浏览器来说是这样的）。而且它的语法也很友好、可读性不错，完全不像 SVG 里的原版语法那样会把人逼疯。它
最大的缺陷在于（在写作本书时）其浏览器支持程度还很有限。但是，它可以平稳退化（只是没有裁切效果而已），因此它至少有资格成为我们的备
选方案。 */
/* 你可能比较熟悉图像处理软件（比如 Adobe Photoshop）中的裁切路径功能。裁切路径允许我们把元素裁剪为我们想要的任何形状。在这个例子
中，我们将会使用 polygon()（多边形）函数来指定一个菱形。实际上，它允许我们用一系列（以逗号分隔的）坐标点来指定任意的多边形。我们甚至
可以使用百分比值，它们会解析为元素自身的尺寸。代码如下所示： */
img {
  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  transition: 1s clip-path;
}

img:hover {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}

/* clip-path 所能创造的奇迹还不止于此。这个属性甚至可以参与动画，只要我们的动画是在同一种形状函数（比如这里是 polygon()）之间进行
的，而且点的数量是相同的。因此，如果我们希望图片在鼠标悬停时平滑地扩展为完整的面积，只需要这样做👆 */