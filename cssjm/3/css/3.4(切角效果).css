/* 目前的 CSS 仍然无法做到只用一行简单直观的代码就生成切角的效果。这导致绝大多数网页开发者倾向于使用背景图片来达到目的，比如
使用三角形盖住元素的顶角来模拟切角效果（当网页背景是纯色时），或者使用一张或多张已经切过角的图片来作为整个元素的背景。
这些方案显然都不够灵活、难以维护，而且增加了网页的加载时间：不仅增加了额外的 HTTP 请求，而且网页所需的文件体积也增加了。我们还有
更好的方法吗？ */

/* 第一种方案来自于无所不能的 CSS 渐变。 */

.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: linear-gradient(135deg,blue 30px , deeppink 15px);
}
/* 事实上，第3行声明并不是必需的，加上它是将其作为回退机制 */

/* 现在，假设我们想要两个角被切掉的效果，以底部的两个角为例。我们只用一层渐变是无法做到这一点的，因此要再加一层。我们最初的想法可能
是这样的 */
.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: linear-gradient(-45deg,blue 30px, deeppink 0),
              linear-gradient(135deg, blue 30px, deeppink 0);
}

/* 这样写是行不通的。默认情况下，这两层渐变都会填满整个元素，因此它们会相互覆盖。需要让它们都缩小一
些，于是我们使用 background-size 让每层渐变分别只占据整个元素一半的面积。 */
.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: linear-gradient(-45deg,blue 30px, deeppink 0),
              linear-gradient(135deg, blue 30px, deeppink 0);
  background-size: 50% 100%;
}

/* 如你所见，尽管我们已经用了background-size，但这两层渐变仍然是相互覆盖的。原因在于，我们忘记把 background-repeat 关掉了，因而每层
渐变图案各自平铺了两次。这导致我们的两层渐变背景仍然是相互覆盖的，只不过这次是因为背景平铺。改进后的代码是这样的 */
.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: linear-gradient(-45deg,blue 30px, deeppink 0) right,
              linear-gradient(135deg, blue 30px, deeppink 0) left;
  background-size: 50% 100%;
  background-repeat: no-repeat;
}

/* 我们终于成功了！看到这里，你应该已经猜到怎样把四个角都做出切角效果了。 */
.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: linear-gradient(-45deg,transparent   30px, deeppink 0) right bottom,
              linear-gradient(135deg, transparent  30px, deeppink 0) left top,
              linear-gradient(-135deg, transparent   30px, deeppink 0) right top,
              linear-gradient(45deg, transparent   30px, deeppink 0) left bottom;
  background-size: 50% 50%;
  background-repeat: no-repeat;
}

/* 弧形切角 */
/* 上述渐变技巧还有一个变种，可以用来创建弧形切角（很多人也把这种效果称为“内凹圆角”，因为它看起来就像是圆角的反向版本）。唯一的区别
在于，我们会用径向渐变来替代上述线性渐变 */
.root {
  width: 200px;
  height: 200px;
  background: deeppink;
  background: radial-gradient(circle at right bottom, transparent  15px, deeppink 0) right bottom,
              radial-gradient(circle at left top, transparent  15px, deeppink 0) left top,
              radial-gradient(circle at right top, transparent  15px, deeppink 0) right top,
              radial-gradient(circle at left bottom, transparent  15px, deeppink 0) left bottom;
  background-size: 50% 50%;
  background-repeat: no-repeat;
}

/* 内联 SVG 与 border-image 方案 */
/* 谢天谢地，我们还有其他一些方法可供选择，具体采用哪种方法取决于实际需求。其中之一就是使用 border-image，并通过一个内联的 SVG 图像
来产生切角效果。基于 border-image 的工作原理由于尺寸无关紧要（border-image 会解决缩放问题，而 SVG 可以实现与尺寸完全无关的完美缩放
——这就是矢量图的好处），每个切片的尺寸都可以设置为 1，以便理解和书写。切角的尺寸是 1，直线边缘也都是 1。相应的代码可能是这样的 */
.root2 {
  width: 200px;
  height: 200px;
  /* background: deeppink; */
  border: 15px solid transparent;
  border-image: 1 url('data:image/svg+xml,\<svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" fill="%2358a">\<polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2"/>\</svg>');
}